---
import type { SearchResult } from "../lib/vector-search";
import { highlightText } from "../lib/highlight";

interface Props {
  results: SearchResult[];
  query: string;
}

const { results, query } = Astro.props;
---

<div class="space-y-6" role="region" aria-label="Search results">
  {
    results.length === 0 && (
      <p class="text-gray-500 dark:text-gray-400" role="status">
        No results found. Try a different search term.
      </p>
    )
  }

  {
    results.length > 0 && (
      <div role="status" class="sr-only">
        Found {results.length} results
      </div>
    )
  }

  <ul role="listbox" class="space-y-4" id="search-results">
    {
      results.map((result, index) => (
        <li
          class="border border-gray-200 dark:border-gray-800 rounded-lg p-4 focus-within:ring-2 focus-within:ring-primary hover:border-primary dark:hover:border-primary-dark dark:focus-within:ring-primary-dark"
          role="option"
          aria-selected="false"
          data-index={index}
        >
          <a
            href={result.url}
            class="block focus:outline-none"
            tabindex="0"
            data-result-link
          >
            <h2 class="text-xl font-semibold mb-2">{result.title}</h2>
            <p
              class="text-gray-600 dark:text-gray-300 mb-2"
              set:html={highlightText(result.content, query)}
            />
            <div class="text-sm text-gray-500">
              Relevance: {(result.similarity * 100).toFixed(1)}%
            </div>
          </a>
        </li>
      ))
    }
  </ul>
</div>

<script></script>
